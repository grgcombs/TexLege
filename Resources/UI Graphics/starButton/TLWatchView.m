//
//  TLWatchView.m
//  TexLege
//
//  Created by Greg Combs on 8/25/14.
//  Copyright (c) 2014 Gregory S Combs. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "TLWatchView.h"


@implementation TLWatchView

#pragma mark Cache

static UIColor* _ovalNormalColor = nil;
static UIColor* _starNormalColor = nil;
static UIColor* _ovalSelectedColor = nil;
static UIColor* _starSelectedColor = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _ovalNormalColor = [[UIColor colorWithRed: 0.282 green: 0.337 blue: 0.38 alpha: 1] retain];
    _starNormalColor = [[UIColor colorWithRed: 0.514 green: 0.537 blue: 0.561 alpha: 1] retain];
    _ovalSelectedColor = [[UIColor colorWithRed: 0.161 green: 0.18 blue: 0.204 alpha: 1] retain];
    _starSelectedColor = [[UIColor colorWithRed: 0.655 green: 0.733 blue: 0.412 alpha: 1] retain];

}

#pragma mark Colors

+ (UIColor*)ovalNormalColor { return _ovalNormalColor; }
+ (UIColor*)starNormalColor { return _starNormalColor; }
+ (UIColor*)ovalSelectedColor { return _ovalSelectedColor; }
+ (UIColor*)starSelectedColor { return _starSelectedColor; }

#pragma mark Drawing Methods

+ (void)drawNormalCanvasWithFrame: (CGRect)frame;
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.03125 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.03125 + 0.5), floor(CGRectGetWidth(frame) * 0.96875 + 0.5) - floor(CGRectGetWidth(frame) * 0.03125 + 0.5), floor(CGRectGetHeight(frame) * 0.96875 + 0.5) - floor(CGRectGetHeight(frame) * 0.03125 + 0.5))];
    [TLWatchView.ovalNormalColor setFill];
    [ovalPath fill];


    //// Star Drawing
    UIBezierPath* starPath = UIBezierPath.bezierPath;
    [starPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.21875 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.56606 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40908 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.76748 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41309 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.60688 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.53473 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.66531 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72754 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.61239 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.33469 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72754 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.39312 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.53473 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.23252 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41309 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.43394 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40908 * CGRectGetHeight(frame))];
    [starPath closePath];
    [TLWatchView.starNormalColor setFill];
    [starPath fill];
}

+ (void)drawSelectedCanvasWithFrame: (CGRect)frame;
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.03125 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.03125 + 0.5), floor(CGRectGetWidth(frame) * 0.96875 + 0.5) - floor(CGRectGetWidth(frame) * 0.03125 + 0.5), floor(CGRectGetHeight(frame) * 0.96875 + 0.5) - floor(CGRectGetHeight(frame) * 0.03125 + 0.5))];
    [TLWatchView.ovalSelectedColor setFill];
    [ovalPath fill];


    //// Star Drawing
    UIBezierPath* starPath = UIBezierPath.bezierPath;
    [starPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.21875 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.56606 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40908 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.76748 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41309 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.60688 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.53473 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.66531 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72754 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.61239 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.33469 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72754 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.39312 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.53473 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.23252 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41309 * CGRectGetHeight(frame))];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.43394 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40908 * CGRectGetHeight(frame))];
    [starPath closePath];
    [TLWatchView.starSelectedColor setFill];
    [starPath fill];
}

#pragma mark Generated Images

+ (UIImage*)imageOfNormalCanvasWithFrame: (CGRect)frame;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(64, 64), NO, 0.0f);
    [TLWatchView drawNormalCanvasWithFrame: frame];
    UIImage* imageOfNormalCanvas = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfNormalCanvas;
}

+ (UIImage*)imageOfSelectedCanvasWithFrame: (CGRect)frame;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(64, 64), NO, 0.0f);
    [TLWatchView drawSelectedCanvasWithFrame: frame];
    UIImage* imageOfSelectedCanvas = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfSelectedCanvas;
}

@end
